# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import grpc_modules.event_store_pb2 as event__store__pb2


class EventStoreServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StoreEvent = channel.unary_unary(
                '/th2.EventStoreService/StoreEvent',
                request_serializer=event__store__pb2.StoreEventRequest.SerializeToString,
                response_deserializer=event__store__pb2.Response.FromString,
                )
        self.StoreEventBatch = channel.unary_unary(
                '/th2.EventStoreService/StoreEventBatch',
                request_serializer=event__store__pb2.StoreEventBatchRequest.SerializeToString,
                response_deserializer=event__store__pb2.Response.FromString,
                )


class EventStoreServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StoreEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StoreEventBatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EventStoreServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StoreEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.StoreEvent,
                    request_deserializer=event__store__pb2.StoreEventRequest.FromString,
                    response_serializer=event__store__pb2.Response.SerializeToString,
            ),
            'StoreEventBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.StoreEventBatch,
                    request_deserializer=event__store__pb2.StoreEventBatchRequest.FromString,
                    response_serializer=event__store__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'th2.EventStoreService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EventStoreService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StoreEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/th2.EventStoreService/StoreEvent',
            event__store__pb2.StoreEventRequest.SerializeToString,
            event__store__pb2.Response.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StoreEventBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/th2.EventStoreService/StoreEventBatch',
            event__store__pb2.StoreEventBatchRequest.SerializeToString,
            event__store__pb2.Response.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
