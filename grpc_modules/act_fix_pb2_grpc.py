# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import grpc_modules.act_fix_pb2 as act__fix__pb2


class ActStub(object):
    """This action executes next steps:
    1) Registers checkpoint in Verifier microservice
    2) Sends passed message as is to Connectivity microservice
    3) Waits Execution Report or Business Message Reject with the same ClOrdID as in passed message
    from Connectivity microservice
    4) Returns the message repose and the Checkpoint 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.sendMessage = channel.unary_unary(
                '/th2.Act/sendMessage',
                request_serializer=act__fix__pb2.PlaceMessageRequest.SerializeToString,
                response_deserializer=act__fix__pb2.SendMessageResponse.FromString,
                )
        self.placeOrderFIX = channel.unary_unary(
                '/th2.Act/placeOrderFIX',
                request_serializer=act__fix__pb2.PlaceMessageRequest.SerializeToString,
                response_deserializer=act__fix__pb2.PlaceMessageResponse.FromString,
                )
        self.placeOrderReplaceFIX = channel.unary_unary(
                '/th2.Act/placeOrderReplaceFIX',
                request_serializer=act__fix__pb2.PlaceMessageRequest.SerializeToString,
                response_deserializer=act__fix__pb2.PlaceMessageResponse.FromString,
                )
        self.placeOrderCancelFIX = channel.unary_unary(
                '/th2.Act/placeOrderCancelFIX',
                request_serializer=act__fix__pb2.PlaceMessageRequest.SerializeToString,
                response_deserializer=act__fix__pb2.PlaceMessageResponse.FromString,
                )
        self.placeOrderMultilegFIX = channel.unary_unary(
                '/th2.Act/placeOrderMultilegFIX',
                request_serializer=act__fix__pb2.PlaceMessageRequest.SerializeToString,
                response_deserializer=act__fix__pb2.PlaceMessageResponse.FromString,
                )
        self.placeOrderMultilegReplaceFIX = channel.unary_unary(
                '/th2.Act/placeOrderMultilegReplaceFIX',
                request_serializer=act__fix__pb2.PlaceMessageRequest.SerializeToString,
                response_deserializer=act__fix__pb2.PlaceMessageResponse.FromString,
                )
        self.placeQuoteFIX = channel.unary_unary(
                '/th2.Act/placeQuoteFIX',
                request_serializer=act__fix__pb2.PlaceMessageRequest.SerializeToString,
                response_deserializer=act__fix__pb2.PlaceMessageResponse.FromString,
                )
        self.placeMarketDataRequestFIX = channel.unary_unary(
                '/th2.Act/placeMarketDataRequestFIX',
                request_serializer=act__fix__pb2.PlaceMessageRequest.SerializeToString,
                response_deserializer=act__fix__pb2.PlaceMessageResponse.FromString,
                )
        self.placeOrderMassCancelRequestFIX = channel.unary_unary(
                '/th2.Act/placeOrderMassCancelRequestFIX',
                request_serializer=act__fix__pb2.PlaceMessageRequest.SerializeToString,
                response_deserializer=act__fix__pb2.PlaceMessageResponse.FromString,
                )


class ActServicer(object):
    """This action executes next steps:
    1) Registers checkpoint in Verifier microservice
    2) Sends passed message as is to Connectivity microservice
    3) Waits Execution Report or Business Message Reject with the same ClOrdID as in passed message
    from Connectivity microservice
    4) Returns the message repose and the Checkpoint 
    """

    def sendMessage(self, request, context):
        """Send fix message without response awaiting 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def placeOrderFIX(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def placeOrderReplaceFIX(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def placeOrderCancelFIX(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def placeOrderMultilegFIX(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def placeOrderMultilegReplaceFIX(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def placeQuoteFIX(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def placeMarketDataRequestFIX(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def placeOrderMassCancelRequestFIX(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ActServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'sendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.sendMessage,
                    request_deserializer=act__fix__pb2.PlaceMessageRequest.FromString,
                    response_serializer=act__fix__pb2.SendMessageResponse.SerializeToString,
            ),
            'placeOrderFIX': grpc.unary_unary_rpc_method_handler(
                    servicer.placeOrderFIX,
                    request_deserializer=act__fix__pb2.PlaceMessageRequest.FromString,
                    response_serializer=act__fix__pb2.PlaceMessageResponse.SerializeToString,
            ),
            'placeOrderReplaceFIX': grpc.unary_unary_rpc_method_handler(
                    servicer.placeOrderReplaceFIX,
                    request_deserializer=act__fix__pb2.PlaceMessageRequest.FromString,
                    response_serializer=act__fix__pb2.PlaceMessageResponse.SerializeToString,
            ),
            'placeOrderCancelFIX': grpc.unary_unary_rpc_method_handler(
                    servicer.placeOrderCancelFIX,
                    request_deserializer=act__fix__pb2.PlaceMessageRequest.FromString,
                    response_serializer=act__fix__pb2.PlaceMessageResponse.SerializeToString,
            ),
            'placeOrderMultilegFIX': grpc.unary_unary_rpc_method_handler(
                    servicer.placeOrderMultilegFIX,
                    request_deserializer=act__fix__pb2.PlaceMessageRequest.FromString,
                    response_serializer=act__fix__pb2.PlaceMessageResponse.SerializeToString,
            ),
            'placeOrderMultilegReplaceFIX': grpc.unary_unary_rpc_method_handler(
                    servicer.placeOrderMultilegReplaceFIX,
                    request_deserializer=act__fix__pb2.PlaceMessageRequest.FromString,
                    response_serializer=act__fix__pb2.PlaceMessageResponse.SerializeToString,
            ),
            'placeQuoteFIX': grpc.unary_unary_rpc_method_handler(
                    servicer.placeQuoteFIX,
                    request_deserializer=act__fix__pb2.PlaceMessageRequest.FromString,
                    response_serializer=act__fix__pb2.PlaceMessageResponse.SerializeToString,
            ),
            'placeMarketDataRequestFIX': grpc.unary_unary_rpc_method_handler(
                    servicer.placeMarketDataRequestFIX,
                    request_deserializer=act__fix__pb2.PlaceMessageRequest.FromString,
                    response_serializer=act__fix__pb2.PlaceMessageResponse.SerializeToString,
            ),
            'placeOrderMassCancelRequestFIX': grpc.unary_unary_rpc_method_handler(
                    servicer.placeOrderMassCancelRequestFIX,
                    request_deserializer=act__fix__pb2.PlaceMessageRequest.FromString,
                    response_serializer=act__fix__pb2.PlaceMessageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'th2.Act', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Act(object):
    """This action executes next steps:
    1) Registers checkpoint in Verifier microservice
    2) Sends passed message as is to Connectivity microservice
    3) Waits Execution Report or Business Message Reject with the same ClOrdID as in passed message
    from Connectivity microservice
    4) Returns the message repose and the Checkpoint 
    """

    @staticmethod
    def sendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/th2.Act/sendMessage',
            act__fix__pb2.PlaceMessageRequest.SerializeToString,
            act__fix__pb2.SendMessageResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def placeOrderFIX(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/th2.Act/placeOrderFIX',
            act__fix__pb2.PlaceMessageRequest.SerializeToString,
            act__fix__pb2.PlaceMessageResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def placeOrderReplaceFIX(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/th2.Act/placeOrderReplaceFIX',
            act__fix__pb2.PlaceMessageRequest.SerializeToString,
            act__fix__pb2.PlaceMessageResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def placeOrderCancelFIX(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/th2.Act/placeOrderCancelFIX',
            act__fix__pb2.PlaceMessageRequest.SerializeToString,
            act__fix__pb2.PlaceMessageResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def placeOrderMultilegFIX(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/th2.Act/placeOrderMultilegFIX',
            act__fix__pb2.PlaceMessageRequest.SerializeToString,
            act__fix__pb2.PlaceMessageResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def placeOrderMultilegReplaceFIX(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/th2.Act/placeOrderMultilegReplaceFIX',
            act__fix__pb2.PlaceMessageRequest.SerializeToString,
            act__fix__pb2.PlaceMessageResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def placeQuoteFIX(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/th2.Act/placeQuoteFIX',
            act__fix__pb2.PlaceMessageRequest.SerializeToString,
            act__fix__pb2.PlaceMessageResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def placeMarketDataRequestFIX(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/th2.Act/placeMarketDataRequestFIX',
            act__fix__pb2.PlaceMessageRequest.SerializeToString,
            act__fix__pb2.PlaceMessageResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def placeOrderMassCancelRequestFIX(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/th2.Act/placeOrderMassCancelRequestFIX',
            act__fix__pb2.PlaceMessageRequest.SerializeToString,
            act__fix__pb2.PlaceMessageResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
