syntax = "proto3";
package th2;

import "infra.proto";
import "event-store.proto";

option java_multiple_files = true;
option java_package = "com.exactpro.th2.act.grpc";

service ActFix {
    /* This action executes next steps:
    1) Registers checkpoint in Verifier microservice
    2) Sends passed message as is to Connectivity microservice
    3) Waits Execution Report or Business Message Reject with the same ClOrdID as in passed message
        from Connectivity microservice
    4) Returns the message repose and the Checkpoint */

    rpc placeOrderFIX (PlaceMessageRequest) returns (PlaceMessageResponse) {
    }
    rpc placeOrderReplaceFIX (PlaceMessageRequest) returns (PlaceMessageResponse) {
    }
    rpc placeOrderCancelFIX (PlaceMessageRequest) returns (PlaceMessageResponse) {
    }
    rpc placeOrderMultilegFIX (PlaceMessageRequest) returns (PlaceMessageResponse) {
    }
    rpc placeOrderMultilegReplaceFIX (PlaceMessageRequest) returns (PlaceMessageResponse) {
    }
    rpc placeQuoteFIX (PlaceMessageRequest) returns (PlaceMessageResponse) {
    }
    rpc placeMarketDataRequestFIX (PlaceMessageRequest) returns (PlaceMessageResponse) {
    }
    /*Send fix message without response awaiting */
    rpc sendMessage (PlaceMessageRequest) returns (SendMessageResponse) {
    }
}

message SendMessageResponse {
    RequestStatus status = 1;
    Checkpoint checkpoint_id = 2;
}

message PlaceMessageRequest {
    Message message = 1;
    ConnectionID connection_id = 2;
    EventID parent_event_id = 4;
    string description = 5;
    map<string, string> key_fields = 6;
}

message PlaceMessageResponse {
    repeated Message response_messages_list = 1;
    RequestStatus status = 2;
    Checkpoint checkpoint_id = 3;
}